* Examples

** Traffic Light System Example

*** Problem Description

In this example, we will model a simple traffic light system using the xDEVS/Python API. The traffic light will cycle through three states: Green, Yellow, and Red. Each state will have a specific duration, and the system will transition between these states in a loop.

*** Model Implementation

We will create an atomic model for the traffic light, which will handle the state transitions and timing. The traffic light will have one output port to indicate the current state.

*** Traffic Light Model

#+begin_src python
from xdevs.models import Atomic, Port
from xdevs.sim import Coordinator, SimulationClock

# Define the states
STATE_GREEN = "Green"
STATE_YELLOW = "Yellow"
STATE_RED = "Red"

class TrafficLight(Atomic):
    def __init__(self, name: str, green_time: float, yellow_time: float, red_time: float):
        super().__init__(name)
        self.green_time = green_time
        self.yellow_time = yellow_time
        self.red_time = red_time

        self.state = STATE_GREEN
        self.sigma = green_time

        self.output_port = Port(str, "state")
        self.add_out_port(self.output_port)

    def initialize(self):
        self.hold_in(STATE_GREEN, self.green_time)

    def deltint(self):
        if self.state == STATE_GREEN:
            self.state = STATE_YELLOW
            self.hold_in(STATE_YELLOW, self.yellow_time)
        elif self.state == STATE_YELLOW:
            self.state = STATE_RED
            self.hold_in(STATE_RED, self.red_time)
        elif self.state == STATE_RED:
            self.state = STATE_GREEN
            self.hold_in(STATE_GREEN, self.green_time)

    def deltext(self, e):
        pass

    def lambdaf(self):
        self.output_port.add(self.state)

    def exit(self):
        pass

# Simulation setup
if __name__ == "__main__":
    green_time = 10.0
    yellow_time = 2.0
    red_time = 8.0

    traffic_light = TrafficLight("TrafficLight", green_time, yellow_time, red_time)
    clock = SimulationClock()
    coordinator = Coordinator(traffic_light, clock)

    coordinator.initialize()
    coordinator.simulate(50)  # Simulate for 50 iterations
#+end_src

*** Explanation

1. *TrafficLight Class*: This class extends the =Atomic= class from the xDEVS library. It defines the traffic light states and their durations.
   - =initialize()=: Sets the initial state to Green and the initial time advance (=sigma=) to the green light duration.
   - =deltint()=: Handles internal transitions between states.
   - =lambdaf()=: Outputs the current state to the =output_port=.
   - =exit()=: Placeholder for any cleanup operations.

2. *Simulation Setup*: The main block sets up the traffic light model with specified durations for each state. It then creates a =Coordinator= to manage the simulation and runs the simulation for 50 iterations.

This example demonstrates how to model a simple traffic light system using the xDEVS/Python API, showcasing the basic principles of discrete event simulation with DEVS formalism.

*** Exercise

Modify the previous example. There should be an output right after the change in the state, i.e., once the light turns green, yellow, or red, the output is triggered with the new color, instantaneously.
